[build-system]
requires = ["setuptools>=61.0"]
build-backend = "setuptools.build_meta"

[tool.setuptools.packages.find]
include = ["ray_curator", "ray_curator.*"]

[tool.setuptools.dynamic]
version = { attr = "ray_curator.package_info.__version__" }

[project]
name = "ray-curator"
version = "0.1.0"
authors = [
    { name = "Ayush Dattagupta", email = "adattagupta@nvidia.com" },
    { name = "Abhinav Garg", email = "abhgarg@nvidia.com" },
    { name = "Praateek Mahajan", email = "praateekm@nvidia.com" },
    { name = "Sarah Yurick", email = "syurick@nvidia.com" },
    { name = "Vibhu Jawa", email = "vjawa@nvidia.com" },
]
description = "A Ray-based data curator"
readme = "README.md"
requires-python = ">=3.10,<3.13"
dependencies = [
    "absl-py>=2.0.0,<3.0.0",
    "comment_parser",
    "cosmos-xenna",
    "fsspec",
    "jieba==0.42.1",
    "jupyter",
    "loguru",
    "mecab-python3",
    "pandas>=2.1.0",
    "pyarrow",
    "ray[default,data]>=2.49",
    "torch",
    "transformers>=4.48.0",
]

[project.optional-dependencies]
text = [
    # Download / Extract
    "beautifulsoup4",
    "justext",
    "lxml",
    "resiliparse",
    "trafilatura==2.0.0",
    "pycld2",
    "warcio",
    "s5cmd",
    # Filters
    "fasttext==0.9.3",
    "sentencepiece",
    "mwparserfromhell==0.6.5",
    # Aegis
    "peft",
    # Modifiers
    "ftfy==6.1.1",
]

# Installs CPU + GPU text curation modules
deduplication_cuda12x = [
    "cudf-cu12==25.6.*",
    "cugraph-cu12==25.6.*",
    "cuml-cu12==25.6.*",
    "nx-cugraph-cu12==25.6.*",
    "pylibraft-cu12==25.6.*",
    "raft-dask-cu12==25.6.*",
    "rapidsmpf-cu12==25.6.*",
]

dev = [
    "debugpy",
    "pre-commit",
    "pytest",
    "pytest-coverage",
    "pytest-loguru",
    "ruff==0.11.4",
    "scikit-learn",
]
video = [
    "av==13.1.0",
    "opencv-python",
    "torchvision",
    "einops",
    "internvideo2-multi-modality @ git+https://github.com/suiyoubi/InternVideo.git@curator#subdirectory=InternVideo2/multi_modality",
    "easydict",
]
video_cuda = [
    "PyNvVideoCodec==1.0.2",
    "cvcuda_cu12",
    "pycuda",
    "vllm",
    "flash_attn",
]

# NVIDIA DALI (simplified; update the package to match your CUDA version if needed)
dali = [
    "nvidia-dali-cuda120",
]

# CPU-only DALI (for environments without CUDA, e.g., GitHub Actions)
dali_cpu = [
    # Install from NVIDIA index directly in CI; don't pull nvidia-pyindex here to avoid wheel build
    "nvidia-dali",
]

all = [
    "ray_curator[deduplication_cuda12x]",
    "ray_curator[text]",
    "ray_curator[video]",
]

[tool.pixi.workspace]
channels = ["conda-forge"]
platforms = ["linux-64", "linux-aarch64"]

# Specify PyPI index settings
[tool.pixi.pypi-options]
index-strategy = "unsafe-best-match"
index-url = "https://pypi.org/simple"
extra-index-urls = ["https://pypi.nvidia.com"]

[tool.pixi.dependencies]
python = "3.12.*"
ffmpeg = "*"  # Add FFmpeg from conda-forge

[tool.pixi.environments]
default = ["all"]
dev = ["deduplication_cuda12x", "text", "video", "dev"]

[tool.pixi.pypi-dependencies]
ray-curator = { path = ".", editable = true }

[tool.coverage.paths]
source = ["./ray-curator/ray_curator", "/workspace/ray-curator/ray_curator", "/home/runner/_work/Curator/Curator/NeMo-Curator/ray-curator/ray_curator"]

[tool.ruff]
line-length = 119
[tool.ruff.lint]
select = ["ALL"]
ignore = [
    "D",  # pydocstyle
    "PTH",  # use pathlib
    "G",  # no enforcement during logging
    "FBT",  # allow booleans in function / class arguments
    "T20",  # allow printing
    "E501",  # Allow line length violations, leave it to Black
    "ANN002",  # don't annotate **args
    "ANN003",  # don't annotate **kwargs
    "ANN204",  # don't annotate self/cls/special methods (__new__)
    "PT013",  # how to import pytest
    "PERF401",  # don't enforce list comprehension
    "RET505", "RET506", "RET507", "RET508",  # allow branching (if else after return)
    "PGH004",  # allow generic noqa
    "PD901",  # allow naming dataframes df
    "TD002",  # Allow TODO without author
    "TD003",  # Allow TODO without link
    "TRY003", # Allow long exception messages rather than creating a new exception class
    "FIX002",  # Allow TODO to exist,
    "EXE002", # Don't require for a shebang to be present if it's executable
    "COM812", # Disable the trailing comma in linter, because ruff formatter ensures it
    "SLF001", # Allow accessing private attributes
]
fixable = ["ALL"]


[tool.ruff.lint.extend-per-file-ignores]
"ray_curator/examples/**" = [
    "INP001", # No __init__.py is required
]
"tests/**/*.py" = [
    "S101", # asserts allowed in tests...
    "ANN201", # Allow methods to not return something
    "PLR2004", # Magic value used in comparison, ...
]

[tool.pytest.ini_options]
testpaths = ["tests"]
markers = [
    "gpu: marks tests as GPU tests (deselect with '-m \"not gpu\"')",
]
